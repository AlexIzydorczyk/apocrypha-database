<script type="text/javascript">
let manuscriptVue;
$(document).ready(function(){
	manuscriptVue = new Vue({
		name: 'manuscriptVue',
		el: '#manuscript-form',
		data: {
			known_booklet_composition: <%= manuscript.known_booklet_composition %>,
			is_folios: <%= manuscript.is_folios %>,
			has_contents: <%= manuscript.contents.count > 0 %>,
			has_ownerships: <%= manuscript.ownerships.count > 0 %>,
			has_booklets: <%= manuscript.booklets.count > 0 %>,
			date_exact: <%= manuscript.date_exact ? "true" : "false" %>,
			date_to: '<%= manuscript.date_to %>', date_from: '<%= manuscript.date_from %>',
			date_to_select: null, date_from_select: null,
		},
		watch: {
			date_from(){
				this.setFrom();
			},
		},
		methods: {
			setFrom(){
				let new_options = [];
				for(let i=0; i<<%= Date.today.year%>; i++){
					if (
						(
							this.date_from == ''
						 || (( (parseInt(this.date_from)-1)%25 == 0) && i%25==0)
						 || (( ((parseInt(this.date_from)%100)-1)%33 == 0) && (i%100 != 99) && i%100%33==0)
						 || i==<%= Date.today.year %>
						)
						&& i>this.date_from
					) new_options.push(i);
				}
				if(!(this.date_to_select.items.length > 0 && this.date_from != '' && (((this.date_from-1)%100%33==0 && this.date_to_select.items[0]%100%33==0) || ((this.date_from-1)%25==0 && this.date_to_select.items[0]%25==0)))) this.date_to_select.clear();
				this.date_to_select.clearOptions(true);
				this.date_to_select.addOptions(new_options.map( o => ({value: o, text: o})));
				if(this.date_to_select.items.length < 1) this.date_to_select.refreshOptions(true);
			}
		},
		mounted(){
			runTomSelects();
			$('#manuscript-form').removeClass('d-none');
			this.date_to_select = new TomSelect("#manuscript_date_to", {
			  maxItems: 1,
			  maxOptions: null,
			});
			this.date_from_select = new TomSelect("#manuscript_date_from", {
			  maxItems: 1,
			  maxOptions: null,
			});
		},
	});
});

function runTomSelects(){
	new TomSelect("#manuscript_institution_id", ts_sort_text_asc_max_1);
	new TomSelect("#manuscript_status");
	new TomSelect("#manuscript_material",ts_sort_text_asc_max_1);
	new TomSelect("#language_reference_id", ts_sort_text_asc_max_null);
	new TomSelect("#manuscript_content_type", ts_sort_text_asc_max_1_create);
	new TomSelect("#manuscript_genesis_location_id",ts_sort_text_asc_max_1);
	new TomSelect("#manuscript_genesis_institution_id", ts_sort_text_asc_max_1);
	new TomSelect("#manuscript_genesis_religious_order_id", ts_sort_text_asc_max_1);
	new TomSelect("#person_reference_id", ts_sort_text_asc_max_null);
	new TomSelect("#correspondent_reference_id",{
		sortField: {
			field: "text",
			direction: "asc",
		},
		maxItems: null,
		lockOptgroupOrder: true,
	});
	new TomSelect("#transcriber_reference_id",{
		sortField: {
			field: "text",
			direction: "asc",
		},
		maxItems: null,
		lockOptgroupOrder: true,
	});
	new TomSelect("#compiler_reference_id",{
		sortField: {
			field: "text",
			direction: "asc",
		},
		maxItems: null,
		lockOptgroupOrder: true,
	});
};

function deleteModernSourceReference(msr_id){
	if(confirm("Are you sure you want to remove this record from this manuscript?")){
    $.ajax({
      url: "/modern_source_references/"+msr_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload();
      }
    });
	}
}
</script>