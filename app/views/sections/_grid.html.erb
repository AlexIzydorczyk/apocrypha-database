<%= render "user_grid_states/configuration_options" %>

<div id="sections_grid" class="ag-theme-alpine" style="height: 75vh; width:100%;"></div>

<%= render 'layouts/grid_save_state_js', record_type: "Section" %>

<script type="text/javascript" charset="utf-8">

  const defaultColDef = {editable: false , sortable: true, filter: true, resizable: true, hide: true, aggFunc: 'concat', filter: 'agMultiColumnFilter', autoHeight: true, enableValue: true, wrapText: true, cellStyle: {wordBreak: 'normal'} };

  const columnDefs = [
    { headerName: "Identification of manuscript", headerTooltip: "Identification of manuscript", children: [
      { headerName: "Ms. no.", headerTooltip: "Ms. no.", field: "manuscript.census_no", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Ms. reference name", headerTooltip: "Ms. reference name", field: "manuscript.identification", enableRowGroup: true },
      { headerName: "Status", headerTooltip: "Status", field: "manuscript.status", filter: 'agSetColumnFilter' },
      { headerName: "City", headerTooltip: "City", field: "manuscript.institution_city", sortingOrder: ['asc'] },
      { headerName: "City (alternative)", headerTooltip: "City (alternative)", field: "manuscript.institution_city_alt" },
      { headerName: "City (combined)", headerTooltip: "City (combined)", field: "manuscript.institution_city_concat" },
      { headerName: "Country", headerTooltip: "Country", field: "manuscript.institution_country" },
      { headerName: "Repository", headerTooltip: "Name", field: "manuscript.institution_name" },
      { headerName: "Repository (alternative)", headerTooltip: "Name (alternative)", field: "manuscript.institution_name_alternative" },
      { headerName: "Repository (combined)", headerTooltip: "Repository (combined)", field: "manuscript.institution_name_concat" },
      { headerName: "Shelfmark", headerTooltip: "Shelfmark", field: "manuscript.shelfmark", filter: 'agSetColumnFilter' },
      { headerName: "Old shelfmarks", headerTooltip: "Old shelfmarks", field: "manuscript.old_shelfmark", filter: 'agSetColumnFilter' },
    ] },
    { headerName: "Apocrypha", children: [
      { headerName: "Apocryphon no", headerTooltip: "Apocryphon no", field: "apocryphon.apocryphon_no", filter: 'agSetColumnFilter' },
      { headerName: "Standard Latin title", headerTooltip: "Standard Latin title", field: "apocryphon.main_latin_title", enableRowGroup: true },
      { headerName: "Other Latin titles", headerTooltip: "Other Latin titles", field: "apocryphon.other_latin_titles" },
      { headerName: "Standard English title", headerTooltip: "Standard English title", field: "apocryphon.main_english_title" },
      { headerName: "Other English titles", headerTooltip: "Other English titles", field: "apocryphon.other_english_titles" },
      { headerName: "All English titles", headerTooltip: "All English titles", field: "apocryphon.all_english_titles" },
      { headerName: "All Latin titles", headerTooltip: "All Latin titles", field: "apocryphon.all_latin_titles" },
    ]},
    { headerName: "Manuscript: general features", children: [
      { headerName: "Material", headerTooltip: "Material", field: "manuscript.material", filter: null },
      { headerName: "No. of pp./ff.", headerTooltip: "No. of pp./ff.", field: "manuscript.leaf_page_no", filter: null },
      { headerName: "Period from", headerTooltip: "Period from", field: "manuscript.date_from", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Period to", headerTooltip: "Period to", field: "manuscript.date_to", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Year(s)", headerTooltip: "Year(s)", field: "manuscript.specific_date", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Content type", headerTooltip: "Content type", field: "manuscript.content_type" , filter: 'agSetColumnFilter' },
      { headerName: "Languages in ms.", headerTooltip: "Languages in ms.", field: "manuscript.languages"  },
      { headerName: "Notes on ms.", headerTooltip: "Notes on ms.", field: "manuscript.notes"  },
    ]},
    { headerName: "Booklet (if identified)", children: [
      { headerName: "Booklet no.", headerTooltip: "Booklet no.", field: "booklet.booklet_no", filter: null },
      { headerName: "Pp./ff. in ms.", headerTooltip: "Pp./ff. in ms.", field: "booklet.pages_folios_from", filter: null },
      { headerName: "Content type", headerTooltip: "Content type", field: "booklet.content_type", filter: 'agSetColumnFilter' },
      { headerName: "Period from", headerTooltip: "Period from", field: "booklet.date_from", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Period to", headerTooltip: "Period to", field: "booklet.date_to", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Year(s)", headerTooltip: "Specific date", field: "booklet.specific_date", comparator: numberSort, filter: 'agSetColumnFilter' },
    ]},
    { headerName: "Origin and provenance", children: [
      { headerName: "Origin of booklet or ms", headerTooltip: "Origin of booklet or ms", field: "genesis.full_description", aggFunc: null },
      { headerName: "Institution", headerTooltip: "Institution", field: "genesis.institution_name" },
      { headerName: "Institution (alternative)", headerTooltip: "Institution (alternative)", field: "genesis.institution_name_alt" },
      { headerName: "Religious order", headerTooltip: "Religious order", field: "genesis.religious_order_name" },
      { headerName: "City", headerTooltip: "City", field: "genesis.city" },
      { headerName: "City (alternative)", headerTooltip: "City (alternative)", field: "genesis.city_alt" },
      { headerName: "City (combined)", headerTooltip: "City (combined)", field: "genesis.city_concat" },
      { headerName: "Diocese", headerTooltip: "Diocese", field: "genesis.diocese" },
      { headerName: "Diocese (alternative)", headerTooltip: "Diocese (alternative)", field: "genesis.diocese_alt" },
      { headerName: "Diocese (combined)", headerTooltip: "Diocese (combined)", field: "genesis.diocese_concat" },
      { headerName: "Region", headerTooltip: "Region", field: "genesis.region" },
      { headerName: "Region (alternative)", headerTooltip: "Region (alternative)", field: "genesis.region_alt" },
      { headerName: "Region (combined)", headerTooltip: "Region (combined)", field: "genesis.region_concat" },
      { headerName: "Country", headerTooltip: "Country", field: "genesis.country" },
      { headerName: "Notes on origin", headerTooltip: "Notes on origin", field: "genesis.origin_notes" },
      { headerName: "Provenance of booklet or manuscript", headerTooltip: "Provenance of booklet or manuscript", field: "genesis.ownerships" },
    ] },
    { headerName: "Contents", children: [
      { headerName: "Sequence no", headerTooltip: "Sequence no", field: "content.sequence_no", comparator: numberSort, filter: null, sort: "asc", sortIndex: 1 },
      { headerName: "Apocr./Non-apocr.", headerTooltip: "Apocr./Non-apocr.", field: "content.apocryphal", filter: 'agSetColumnFilter' },
      { headerName: "Contents item", headerTooltip: "Contents item", field: "content.content_item" },
    ]},
    { headerName: "Apocryphon in ms.: general features", children: [
      { headerName: "Language", headerTooltip: "Language", field: "text.languages" },
      { headerName: "Pp/ff. in ms.", headerTooltip: "Ff./pp. in ms.", field: "text.text_pages_folios", filter: false },
      { headerName: "Period from", headerTooltip: "Period from", field: "text.date_from", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Period to", headerTooltip: "Period to", field: "text.date_to", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Year(s)", headerTooltip: "Specific date", field: "text.specific_date", comparator: numberSort, filter: 'agSetColumnFilter' },
      { headerName: "Columns", headerTooltip: "Columns", field: "text.no_columns", filter: null },
      { headerName: "Decoration", headerTooltip: "Decoration", field: "text.decoration", filter: 'agSetColumnFilter' },
      { headerName: "Script", headerTooltip: "Script", field: "text.script" },
      { headerName: "Scribe(s)", headerTooltip: "Scribe(s)", field: "text.scribes" },
      { headerName: "Notes on scribe(s)", headerTooltip: "Notes on scribe(s)", field: "text.notes_on_scribe", filter: 'agSetColumnFilter' },
    ]},
    { headerName: "Apocryphon in ms.: textual features", children: [
      { headerName: "Pp./ff. title", headerTooltip: "Pp./ff. title", field: "text.title_folios_pages" },
      { headerName: "Title in ms.", headerTooltip: "Title in ms.", field: "text.manuscript_title_orig" },
      { headerName: "Title in ms. (translit.)", headerTooltip: "Title in ms. (translit.)", field: "text.manuscript_title_orig_transliteration" },
      { headerName: "Title in ms. (transla.)", headerTooltip: "Title in ms. (transla.)", field: "text.manuscript_title_translation" },
      { headerName: "Section no.", headerTooltip: "Section no.", field: "section.section_number", comparator: numberSort, sort: "asc", sortIndex: 2 },
      { headerName: "Section name", headerTooltip: "Section name", field: "section.section_name" },
      { headerName: "Pp./ff. incipit", headerTooltip: "Pp./ff. incipit", field: "section.pages_folios_incipit", filter: null },
      { headerName: "Incipit", headerTooltip: "Incipit", field: "section.incipit_orig", cellRenderer: richTextRender },
      { headerName: "Incipit (translit.)", headerTooltip: "Incipit (translit.)", field: "section.incipit_orig_transliteration", cellRenderer: richTextRender },
      { headerName: "Incipit (transla.)", headerTooltip: "Incipit (transla.)", field: "section.incipit_translation", cellRenderer: richTextRender },
      { headerName: "Pp./ff. explicit", headerTooltip: "Explicit pp./ff.", field: "section.pages_folios_explicit", filter: null },
      { headerName: "Explicit", headerTooltip: "Explicit", field: "section.explicit_orig", cellRenderer: richTextRender },
      { headerName: "Explicit (translit.)", headerTooltip: "Explicit (translit.)", field: "section.explicitorig_transliteration", cellRenderer: richTextRender },
      { headerName: "Explicit (transla.)", headerTooltip: "Explicit (transla.)", field: "section.explicit_translation", cellRenderer: richTextRender },
      { headerName: "Pp./ff. colophon", headerTooltip: "Pp./ff. colophon", field: "text.pages_folios_colophon", filter: null },
      { headerName: "Colophon", headerTooltip: "Colophon", field: "text.colophon_orig" },
      { headerName: "Colophon (translit.)", headerTooltip: "Colophon (translit.)", field: "text.colophon_transliteration" },
      { headerName: "Colophon (transla.)", headerTooltip: "Colophon (transla.)", field: "text.colophon_translation" },
      { headerName: "Extent", headerTooltip: "Extent", field: "text.extent", filter: 'agSetColumnFilter'},
      { headerName: "Version", headerTooltip: "Version", field: "text.version"},
      { headerName: "Notes", field: "text.notes", cellRenderer: richTextRender },      
    ]},
    { headerName: "Links", children: [
      { headerName: "e-Clavis", headerTooltip: "e-Clavis", field: "apocryphon.e_clavis_link", cellRenderer: linkRenderer, filter: 'agSetColumnFilter', aggFunc: "linkAgg" },
      { headerName: "Reproduction online", headerTooltip: "Reproduction online", field: "manuscript.reproduction_online", cellRenderer: linkRenderer, filter: 'agSetColumnFilter', aggFunc: "linkAgg" },
      { headerName: "Online databases", headerTooltip: "Online databases", field: "manuscript.manuscript_urls", cellRenderer: linkRenderer, filter: 'agSetColumnFilter', aggFunc: "linkAgg" },
      { headerName: "Ms. full descr.", headerTooltip: "Ms. full descr.", field: "manuscript.show_link", cellRenderer: linkRenderer, cellRendererParams: {display_text: "Open"}, aggFunc: "linkAgg" },
    ]},
    // { headerName: "Credits", children: [
    //   { headerName: "Correspondent(s)", field: "manuscript.correspondent_names" },
    //   { headerName: "Transcriber(s)", field: "manuscript.transcriber_names" },
    //   { headerName: "Compiler(s)", field: "manuscript.compiler_names" },
    // ] },
  ];

  const rowData = [
    <% @queries.each do |key, value| %>
      <% value.each do |rec| %>
        { 
          section:{
            <% section = key == :sections ? rec : @new_section %>
            section_name: `<%= section.section_name.html_safe %>`,
            section_number: "<%= section.index.present? ? (section.index + 1) : '' %>",
            pages_folios_incipit: `<%= section.pages_folios_incipit.html_safe %>`,
            incipit_orig: `<%= section.incipit_orig.html_safe.html_safe %>`,
            incipit_orig_transliteration: `<%= section.incipit_orig_transliteration.html_safe %>`,
            incipit_translation: `<%= section.incipit_translation.html_safe %>`,
            pages_folios_explicit: `<%= section.pages_folios_explicit.html_safe %>`,
            explicit_orig: `<%= section.explicit_orig.html_safe %>`,
            explicitorig_transliteration: `<%= section.explicitorig_transliteration.html_safe %>`,
            explicit_translation: `<%= section.explicit_translation.html_safe %>`,
          },
          text: {
            <% text = key == :texts ? rec : ([:sections].include?(key) ? section.text : @new_text) %>
            id: <%= text.id || "undefined" %>,
            text_pages_folios: `<%= text.text_pages_folios_to.html_safe %>`,
            decoration: `<%= text.decoration.html_safe %>`,
            title_folios_pages: `<%= text.title_pages_folios_to.html_safe %>`,
            manuscript_title_orig: `<%= text.manuscript_title_orig.html_safe %>`,
            manuscript_title_orig_transliteration: `<%= text.manuscript_title_orig_transliteration.html_safe %>`,
            manuscript_title_translation: `<%= text.manuscript_title_translation.html_safe %>`,
            pages_folios_colophon: `<%= text.colophon_pages_folios_to.html_safe %>`,
            colophon_orig: `<%= text.colophon_orig.html_safe %>`,
            colophon_transliteration: `<%= text.colophon_transliteration.html_safe %>`,
            colophon_translation: `<%= text.colophon_translation.html_safe %>`,
            notes: `<%= text.notes.html_safe %>`,
            transcriber_id: "<%= text.transcriber_id %>",
            version: `<%= text.version.html_safe %>`,
            extent: `<%= text.extent.html_safe %>`,
            languages: <%= text.languages.map(&:language_name).to_json.html_safe %>,
            date_from: `<%= text.try(:date_from).try(:html_safe) %>`,
            date_to: `<%= text.try(:date_to).try(:html_safe) %>`,
            specific_date: "<%= 'ca. ' if !text.date_exact && text.specific_date.present? %><%= text.try(:specific_date).try(:html_safe) %>",
            no_columns: "<%= text.no_columns %>",
            scribes: <%= (text.try(:scribes) || []).map(&:full_name).to_json.html_safe %>,
            script: `<%= text.script.html_safe %>`,
            notes_on_scribe: `<%= text.notes_on_scribe.try(:html_safe) %>`,
          },
          content: {
            <% content = key == :contents ? rec : ([:texts, :sections].include?(key) ? text.content : @new_content) %>
            id: <%= content.id || "undefined" %>,
            sequence_no: "<%= content.sequence_no %>",
            content_item: `<%= [content.try(:title).try(:title_orig), content.author.try(:full_name)].select{ |s| s.present? }.join(', ').html_safe %>`,
            apocryphal: "<%= content.try(:title).try(:apocryphon_id).present? ? 'Apocryphal' : 'Non apocryphal' %>",
          },
          apocryphon: {
            <% apocryphon = (content.title_id.present? && content.title.apocryphon_id.present? ? content.title.apocryphon : @new_apocryphon) %>
            id: <%= apocryphon.id || "undefined" %>,
            apocryphon_no: `<%= apocryphon.apocryphon_no.html_safe %>`,
            main_english_title: `<%= apocryphon.main_eng_title.try(:html_safe) if apocryphon.id.present? %>`,
            other_english_titles: `<%= Title.where(apocryphon_id: apocryphon.id).where(language_id: english_id).order('title_orig').where.not(id: apocryphon.main_english_title_id).map{ |t| t.title_orig.html_safe }.join(', ').html_safe if apocryphon.id.present? %>`,
            main_latin_title: `<%= apocryphon.main_lat_title.try(:html_safe) if apocryphon.id.present? %>`,
            other_latin_titles: `<%= Title.where(apocryphon_id: apocryphon.id).where(language_id: latin_id).order('title_orig').where.not(id: apocryphon.main_latin_title_id).map{ |t| t.title_orig.html_safe }.join(', ').html_safe if apocryphon.id.present? %>`,
            all_english_titles: <%= apocryphon.id.present? ? [apocryphon.main_eng_title, Title.where(apocryphon_id: apocryphon.id).where(language_id: english_id).order('title_orig').where.not(id: apocryphon.main_english_title_id).map{ |t| t.title_orig.html_safe }].flatten.to_json.html_safe : "[]" %>,
            all_latin_titles: <%= apocryphon.id.present? ? [apocryphon.main_lat_title, Title.where(apocryphon_id: apocryphon.id).where(language_id: latin_id).order('title_orig').where.not(id: apocryphon.main_latin_title_id).map{ |t| t.title_orig.html_safe }].flatten.to_json.html_safe : "[]" %>,
            e_clavis_link: `<%= apocryphon.e_clavis_link.html_safe %>`,
          },
          booklet: {
            <% booklet = key == :booklets ? rec : ([:texts, :sections, :contents].include?(key) && content.booklet_id.present? ? content.booklet : @new_booklet) %>
            id: <%= booklet.id || "undefined" %>,
            booklet_no: `<%= booklet.try(:booklet_no).try(:html_safe) %>`,
            pages_folios_from: `<%= booklet.try(:pages_folios_from).try(:html_safe) %>`,
            pages_folios_to: `<%= booklet.try(:pages_folios_to).try(:html_safe) %>`,
            date_from: `<%= booklet.try(:date_from).try(:html_safe) %>`,
            date_to: `<%= booklet.try(:date_to).try(:html_safe) %>`,
            specific_date: `<%= 'ca. ' if !booklet.date_exact && booklet.specific_date.present? %><%= booklet.try(:specific_date).try(:html_safe) %>`,
            scribes: <%= (booklet.try(:scribes) || []).map(&:full_name).to_json.html_safe %>,
            content_type: `<%= booklet.try(:content_type).try(:html_safe) %>`,
          },
          manuscript: {
            <% manuscript = key == :manuscripts ? rec : ([:booklets].include?(key) || content.booklet_id.present? ? booklet.manuscript : content.manuscript) %>
            id: <%= manuscript.id || "undefined" %>,
            show_link: "<%= manuscript_path(manuscript) %>",
            identifier: "<%= manuscript.identifier %>",
            reproduction_online: <%= manuscript.reproduction_urls.map(&:url).to_json.html_safe %>,
            census_no: "<%= manuscript.census_no %>",
            status: "<%= manuscript.status %>",
            institution_id: "<%= manuscript.institution_id %>",
            <% m_institution = manuscript.institution %>
            institution_name: `<%= m_institution.try(:display_name).try(:html_safe) %>`,
            institution_name_alternative: "<%= m_institution.try(:name_alt) %>",
            institution_name_concat: `<%= [m_institution.try(:display_name), m_institution.try(:name_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            <% m_institution_loc = manuscript.institution.try(:location) %>
            institution_city: `<%= m_institution_loc.try(:city).try(:html_safe) %>`,
            institution_city_alt: `<%= m_institution_loc.try(:city_alt).try(:html_safe) %>`,
            institution_city_concat: `<%= [m_institution_loc.try(:city), m_institution_loc.try(:city_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            institution_region: `<%= m_institution_loc.try(:region).try(:html_safe) %>`,
            institution_region_alt: `<%= m_institution_loc.try(:region_alt).try(:html_safe) %>`,
            institution_region_concat: `<%= [m_institution_loc.try(:region), m_institution_loc.try(:region_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            institution_country: `<%= m_institution_loc.try(:country).try(:html_safe) %>`,
            institution_diocese: `<%= m_institution_loc.try(:diocese).try(:html_safe) %>`,
            institution_diocese_alt: `<%= m_institution_loc.try(:diocese_alt).try(:html_safe) %>`,
            institution_diocese_concat: `<%= [m_institution_loc.try(:diocese), m_institution_loc.try(:diocese_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            scribe_names: <%= manuscript.scribes.map(&:full_name).to_json.html_safe %>,
            scribe_ids: <%= manuscript.scribes.map(&:id).to_json.html_safe %>,
            correspondent_names: <%= manuscript.correspondents.map(&:full_name).to_json.html_safe %>,
            correspondent_ids: <%= manuscript.correspondents.map(&:id).to_json.html_safe %>,
            transcriber_names: <%= manuscript.transcribers.map(&:full_name).to_json.html_safe %>,
            transcriber_ids: <%= manuscript.transcribers.map(&:id).to_json.html_safe %>,
            compiler_names: <%= manuscript.compilers.map(&:full_name).to_json.html_safe %>,
            compiler_ids: <%= manuscript.compilers.map(&:id).to_json.html_safe %>,
            shelfmark: "<%= manuscript.shelfmark.html_safe %>",
            old_shelfmark: "<%= manuscript.old_shelfmark.html_safe  %>",
            material: "<%= manuscript.material.html_safe  %>",
            dimensions: "<%= manuscript.dimensions.html_safe %>",
            leaf_page_no: "<%= manuscript.leaf_page_no + (manuscript.is_folios ? " ff." : " pp.") %>",
            date_from: "<%= manuscript.date_from.html_safe  %>",
            date_to: "<%= manuscript.date_to.html_safe  %>",
            specific_date: "<%= 'ca. ' if !manuscript.date_exact && manuscript.specific_date.present? %><%= manuscript.specific_date.html_safe %>",
            content_type: `<%= manuscript.content_type.html_safe %>`,
            notes: `<%= manuscript.notes.html_safe  %>`,
            languages: <%= manuscript.languages.pluck(:language_name).to_json.html_safe %>,
            manuscript_urls: <%= manuscript.database_urls.map(&:url).to_json.html_safe %>,
            identification: `<%= manuscript.try(:census_no).to_s + '. ' +
            [
              [['lost', 'destroyed'].include?(manuscript.status) ? '*' : '', m_institution_loc.try(:city)].select{ |t| t.present? }.join(""),
              m_institution_loc.try(:country),
              m_institution.try(:display_name),
              manuscript.shelfmark
            ].select{ |s| s.present? }.join(', ').html_safe %>`,
          },
          genesis: {
            <% genesis_source = manuscript.booklets.present? ? booklet : manuscript %>
            institution_name: "<%= genesis_source.genesis_institution.try(:name).try(:html_safe) %>",
            institution_name_alt: "<%= genesis_source.genesis_institution.try(:name_alt).try(:html_safe) %>",
            institution_name_concat: `<%= [genesis_source.genesis_institution.try(:name), genesis_source.genesis_institution.try(:name_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            religious_order_name: "<%= genesis_source.genesis_religious_order.try(:order_name).try(:html_safe) %>",
            religious_order_abbrev: "<%= genesis_source.genesis_religious_order.try(:abbreviation).try(:html_safe)%>",
            city: "<%= genesis_source.genesis_location.try(:city).try(:html_safe) %>",
            city_alt: "<%= genesis_source.genesis_location.try(:city_alt).try(:html_safe) %>",
            city_concat: `<%= [genesis_source.genesis_location.try(:city), genesis_source.genesis_location.try(:city_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            region: "<%= genesis_source.genesis_location.try(:region).try(:html_safe) %>",
            region_alt: "<%= genesis_source.genesis_location.try(:region_alt).try(:html_safe) %>",
            region_concat: `<%= [genesis_source.genesis_location.try(:region), genesis_source.genesis_location.try(:region_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            country: "<%= genesis_source.genesis_location.try(:country).try(:html_safe) %>",
            diocese: "<%= genesis_source.genesis_location.try(:diocese).try(:html_safe) %>",
            diocese_alt: "<%= genesis_source.genesis_location.try(:diocese_alt).try(:html_safe) %>",
            diocese_concat: `<%= [genesis_source.genesis_location.try(:diocese), genesis_source.genesis_location.try(:diocese_alt)].select{ |t| t.present? }.join(", ").html_safe %>`,
            origin_notes: `<%= genesis_source.try(:origin_notes).try(:html_safe) %>`,
            ownerships: `<%= genesis_source.ownerships.map(&:full_display_name).join(' ‖ ').html_safe %>`,
            full_description: `<%= [
              [
                genesis_source.genesis_institution.try(:name),
                genesis_source.genesis_religious_order.try(:order_name),
                genesis_source.genesis_location.try(:city),
                genesis_source.genesis_location.try(:diocese),
                genesis_source.genesis_location.try(:region),
                genesis_source.genesis_location.try(:country),
              ].select{ |s| s.present? }.join(", ").html_safe,
              genesis_source.try(:origin_notes).try(:html_safe),
            ].select{ |s| s.present? }.join(". ") %>`
          }
        },
      <% end %>
    <% end %>
  ];

  const gridOptions = {
    columnDefs: columnDefs,
    // onColumnVisible: onColumnVisible,
    defaultColDef: defaultColDef,
    suppressMenuHide: true,
    groupAggFiltering: true,
    autoGroupColumnDef: {
      cellRendererParams: {
        // suppressCount: true,
      },
      filter: 'agTextColumnFilter',
      filterValueGetter: params => {      
          // console. log("params", params);
          const colId = params.column.colId;        
          if (colId.includes('identification')) {
              return params.data.manuscript.identification;   
          }
      },           
    },
    rowData: rowData,
    sideBar: {
      toolPanels: [
        {
          id: 'filters',
          labelDefault: 'Filters',
          labelKey: 'filters',
          iconKey: 'filter',
          toolPanel: 'agFiltersToolPanel',
          toolPanelParams: {
            suppressSyncLayoutWithGrid: true,
          },
        },
        {
          id: 'columns',
          labelDefault: 'Columns',
          labelKey: 'columns',
          iconKey: 'columns',
          toolPanel: 'agColumnsToolPanel',
        },
      ],
      defaultToolPanel: null,
    },
    rowHeight: 28,
    suppressAggFuncInHeader: true,
    groupDisplayType: 'multipleColumns',
    enableBrowserTooltips: true,
    aggFuncs: {
      concat: (params) => {
        let arr = params.values.filter(onlyUnique).map(function(val) {
          return val == "" || val == [] || val == {} ? '(blank)' : val;
        })
        return arr.join(' ‖ ');
      },
      linkAgg: (params) => {
        return params.values.flat().filter(onlyUnique);
      }
    },
    initialGroupOrderComparator: function (params) {
      if(params.nodeA.field == "manuscript.identification" && params.nodeB.field == "manuscript.identification"){
        a1 = params.nodeA.allLeafChildren[0].data.manuscript.institution_city;
        a2 = params.nodeB.allLeafChildren[0].data.manuscript.institution_city;
        b1 = params.nodeA.allLeafChildren[0].data.manuscript.institution_name;
        b2 = params.nodeB.allLeafChildren[0].data.manuscript.institution_name;
        c1 = params.nodeA.allLeafChildren[0].data.manuscript.shelfmark;
        c2 = params.nodeB.allLeafChildren[0].data.manuscript.shelfmark;
        // d1 = params.nodeA.allLeafChildren[0].data.contents.sequence_no;
        // d2 = params.nodeB.allLeafChildren[0].data.contents.sequence_no;
        // e1 = params.nodeA.allLeafChildren[0].data.section.section_number;
        // e2 = params.nodeB.allLeafChildren[0].data.section.section_number;
        if(a1 == a2){
          if(b1 == b2) return b1 < b2 ? -1 : b1 > b2 ? 1 : 0;
          else return c1 < c2 ? -1 : c1 > c2 ? 1 : 0;
        } else return a1 < a2 ? -1 : a1 > a2 ? 1 : 0;
      } else {
        const a = params.nodeA.key || '';
        const b = params.nodeB.key || '';
        return a < b ? -1 : a > b ? 1 : 0;
      }
    },
    rowGroupPanelShow: "onlyWhenGrouping",
    statusBar: {
      statusPanels: [
        { statusPanel: 'agTotalAndFilteredRowCountComponent', align: 'left' },
        { statusPanel: 'agTotalRowCountComponent', align: 'center' },
        { statusPanel: 'agFilteredRowCountComponent' },
        { statusPanel: 'agSelectedRowCountComponent' },
      ],
    },
  };

  // function onColumnVisible(params) {
  //   updateAllFilterVisiblity();
  // }

  // function updateAllFilterVisiblity(){
  //   gridOptions.columnApi.applyColumnState(gridOptions.api.getColumnDefs().map(function(column) {
  //     return setFilterVisibility(column);
  //   }));
  // }

  // function setFilterVisibility(col) {
  //   let new_object = col
  //   if('children' in col) new_object.children = col.children.map(function(child) {
  //     return setFilterVisibility(child);
  //   });
  //   else{
  //     new_object.suppressFiltersToolPanel = col.hide == true;
  //     new_object.hide = col.hide == true;
  //   }
  //   return new_object
  // }

  function numberSort(num1, num2){
    return parseInt(num1) - parseInt(num2);
  };

  function richTextRender(p) {
    return p.value;
  }

  function linkRenderer(p) {
    let to_return = [];
    if(Array.isArray(p.value) && p.value.length > 0){
      to_return = p.value.map(function(value) {
        if(!value || value.length < 1){
          return ""
        }else{
          let temp = document.createElement('a');
          temp.href = value;
          return "<a href='" + value + "' target='blank'>" + (p.display_text || temp.hostname) + "</a>"
        }
      });
    } else {
      if(!p.value || p.value.length < 1){
        to_return = [""];
      }else{
        let temp = document.createElement('a');
        temp.href = p.value;
        to_return = ["<a href='" + p.value + "' target='blank'>" + (p.display_text || temp.hostname) + "</a>"];
      };
    }
    return to_return.filter( s => s && s.length > 0 ).join(", ");
  }

  function onFilterTextBoxChanged() {
      gridOptions.api.setQuickFilter(
        document.getElementById('filter-text-box').value
      );
  }

  function tooltipValueGetter(params) {
    return params.colDef.headerName;
  }

  function expand(argument) {
    gridOptions.api.expandAll();
    $("#expand").hide();
    $("#collapse").show();
  }

  function collapse(argument) {
    gridOptions.api.collapseAll();
    $("#expand").show();
    $("#collapse").hide();
  }

  const eGridDiv = document.querySelector('#sections_grid');
  new agGrid.Grid(eGridDiv, gridOptions);
  var columnToolPanel = gridOptions.api.getToolPanelInstance('columns');
  columnToolPanel.collapseColumnGroups();
  autoSizeAll(gridOptions, false);
  // updateAllFilterVisiblity();

  // var model = {content.apocryphal: {values: ["Apocryphal"], filterType: "set"}};
  // gridOptions.api.setFilterModel(model);
  
</script>
