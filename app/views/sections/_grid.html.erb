<%= render "user_grid_states/configuration_options" %>

<div class="d-flex mb-2 align-items-end">
  <input type="text" class="form-control w-auto" id="filter-text-box" placeholder="Filter grid" oninput="onFilterTextBoxChanged()" name="filter">
  <button class="btn btn-sm btn-outline-action ms-auto" onclick="gridOptions.api.setFilterModel(null);">Reset filters</button>
  <% if user_signed_in? %>
    <button class="btn btn-sm btn-outline-action ms-2" onclick="saveState()">Save grid configuration</button>
    <button class="btn btn-sm btn-outline-action ms-2" onclick="resetState()">Reset grid configuration</button>
  <% end %>
</div>

<div id="sections_grid" class="ag-theme-alpine" style="height: 75vh; width:100%;"></div>

<% if user_signed_in? %>
  <%= render 'layouts/grid_save_state_js', record_type: "Section" %>
<% end %>

<script type="text/javascript" charset="utf-8">

  const defaultColDef = {editable: false , sortable: true, filter: true, resizable: true, hide: true, aggFunc: 'customAgg', filter: 'agTextColumnFilter', autoHeight: true, wrapText: true, cellStyle: {wordBreak: 'normal'}
 };

  const columnDefs = [
    { headerName: "Apocryphon", children: [
      { headerName: "Apocryphal", headerTooltip: "Apocryphal", field: "content.apocryphal" },
      { headerName: "Apocryphon id", headerTooltip: "Apocryphon id", field: "apocryphon.id", enableRowGroup: true, filter: 'agNumberColumnFilter' },
      { headerName: "Apocryphon no", headerTooltip: "Apocryphon no", field: "apocryphon.apocryphon_no", filter: 'agNumberColumnFilter'},
      { headerName: "Standard English title", headerTooltip: "Standard English title", field: "apocryphon.main_english_title" },
      { headerName: "Other English titles", headerTooltip: "Other English titles", field: "apocryphon.other_english_titles" },
      { headerName: "Standard Latin title", headerTooltip: "Standard Latin title", field: "apocryphon.main_latin_title", hide: false },
      { headerName: "Other Latin titles", headerTooltip: "Other Latin titles", field: "apocryphon.other_latin_titles" },
    ]},
    { headerName: "Identification of manuscript", headerTooltip: "Identification of manuscript", children: [
      { headerName: "No.", headerTooltip: "No.", field: "manuscript.census_no", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Identification of manuscript", headerTooltip: "Identification of manuscript", headerTooltip: "Identification of manuscript", field: "manuscript.identification", enableRowGroup: true, rowGroup: true },
      { headerName: "City", headerTooltip: "City", field: "manuscript.institution_city", hide: false, sortingOrder: ['asc'] },
      { headerName: "City (alternative)", headerTooltip: "City (alternative)", field: "manuscript.institution_city_alt" },
      { headerName: "Country", headerTooltip: "Country", field: "manuscript.institution_country", hide: false },
      { headerName: "Name", headerTooltip: "Name", field: "manuscript.institution_name", hide: false },
      { headerName: "Name (alternative)", headerTooltip: "Name (alternative)", field: "manuscript.institution_name_alternative" },
      { headerName: "Shelfmark", headerTooltip: "Shelfmark", field: "manuscript.shelfmark", hide: false },
      { headerName: "Old shelfmarks", headerTooltip: "Old shelfmarks", field: "manuscript.old_shelfmark", hide: false },
      { headerName: "Status", headerTooltip: "Status", field: "manuscript.status", hide: false },
    ] },
    { headerName: "Manuscript: general features", children: [
      { headerName: "Material", headerTooltip: "Material", field: "manuscript.material", hide: false},
      { headerName: "Dimensions", headerTooltip: "Dimensions", field: "manuscript.dimensions", hide: false },
      { headerName: "No. of pp./ff.", headerTooltip: "No. of pp./ff.", field: "manuscript.leaf_page_no", hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Date from", headerTooltip: "Date from", field: "manuscript.date_from", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Date to", headerTooltip: "Date to", field: "manuscript.date_to", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Specific date", headerTooltip: "Specific date", field: "manuscript.specific_date", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Content type", headerTooltip: "Content type", field: "manuscript.content_type" , hide: false },
      { headerName: "Languages in ms.", headerTooltip: "Languages in ms.", field: "manuscript.languages", hide: false  },
      { headerName: "Notes on ms.", headerTooltip: "Notes on ms.", field: "manuscript.notes", cellEditor: 'agLargeTextCellEditor', hide: false  },
    ]},
    { headerName: "Booklet (if identified): general features", children: [
      { headerName: "Booklet id", headerTooltip: "Booklet id", field: "booklet.id", enableRowGroup: true, rowGroup: true, hide: true, filter: 'agNumberColumnFilter' },
      { headerName: "Booklet no.", headerTooltip: "Booklet no.", field: "booklet.booklet_no", hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Ff./pp. in ms.", headerTooltip: "Ff./pp. in ms.", field: "booklet.pages_folios_from", hide: false, filter: 'agNumberColumnFilter' },
      // { headerName: "Location of booklet (to)", field: "booklet.pages_folios_to" },
      { headerName: "Content type", headerTooltip: "Content type", field: "booklet.content_type", hide: false },
      { headerName: "Date from", headerTooltip: "Date from", field: "booklet.date_from", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Date to", headerTooltip: "Date to", field: "booklet.date_to", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Specific date", headerTooltip: "Specific date", field: "booklet.specific_date", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      // { headerName: "Scribes", field: "booklet.scribes" },
    ]},
    { headerName: "Origin of booklet (if identified) or manuscript", children: [
      { headerName: "Institution", headerTooltip: "Institution", field: "genesis.institution_name", hide: false },
      { headerName: "Institution (alternative)", headerTooltip: "Institution (alternative)", field: "genesis.institution_name_alt", hide: true },
      { headerName: "Religious order", headerTooltip: "Religious order", field: "genesis.religious_order_name", hide: false },
      { headerName: "Religious order (abbrev.)", headerTooltip: "Religious order (abbrev.)", field: "genesis.religious_order_abbrev", hide: true },
      { headerName: "City", headerTooltip: "City", field: "genesis.city", hide: false },
      { headerName: "City (alternative)", headerTooltip: "City (alternative)", field: "genesis.city_alt", hide: true },
      { headerName: "Diocese", headerTooltip: "Diocese", field: "genesis.diocese", hide: false },
      { headerName: "Diocese (alternative)", headerTooltip: "Diocese (alternative)", field: "genesis.diocese_alt", hide: true },
      { headerName: "Region", headerTooltip: "Region", field: "genesis.region", hide: false },
      { headerName: "Region (alternative)", headerTooltip: "Region (alternative)", field: "genesis.region_alt", hide: true },
      { headerName: "Country", headerTooltip: "Country", field: "genesis.country", hide: false },
      { headerName: "Notes on origin", headerTooltip: "Notes on origin", field: "genesis.origin_notes", hide: false },
      { headerName: "Provenance", headerTooltip: "Provenance", field: "genesis.ownerships", hide: false },
    ] },
    { headerName: "Contents", children: [
      { headerName: "Content id", headerTooltip: "Content id", field: "content.id", enableRowGroup: true, rowGroup: true, hide: true, filter: 'agNumberColumnFilter' },
      { headerName: "Sequence no", headerTooltip: "Sequence no", field: "content.sequence_no", hide: false, comparator: numberSort, filter: 'agNumberColumnFilter' },
      { headerName: "Title", headerTooltip: "Title", field: "content.title", hide: false },
      { headerName: "Author", headerTooltip: "Author", field: "content.author", hide: false },
    ]},

    { headerName: "Apocryphon in manuscript: general features", children: [
      // { headerName: "Text id", field: "text.id", enableRowGroup: true, rowGroup: true, hide: true },
      { headerName: "Language", headerTooltip: "Language", field: "text.languages", hide: false },
      { headerName: "Ff./pp. in ms.", headerTooltip: "Ff./pp. in ms.", field: "text.text_pages_folios", hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Date from", headerTooltip: "Date from", field: "text.date_from", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Date to", headerTooltip: "Date to", field: "text.date_to", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Specific date", headerTooltip: "Specific date", field: "text.specific_date", comparator: numberSort, hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Columns", headerTooltip: "Columns", field: "text.no_columns", hide: false, filter: 'agNumberColumnFilter' },
      { headerName: "Scribe(s)", headerTooltip: "Scribe(s)", field: "text.scribes", hide: false },
      { headerName: "Notes on scribe(s)", headerTooltip: "Notes on scribe(s)", field: "text.notes_on_scribe", hide: false },
      { headerName: "Script", headerTooltip: "Script", field: "text.script", hide: false },
      { headerName: "Decoration", headerTooltip: "Decoration", field: "text.decoration", hide: false },
    ]},
    { headerName: "Apocryphon in manuscript: textual features", children: [
      { headerName: "Title pp./ff.", headerTooltip: "Title pp./ff.", field: "text.title_folios_pages", filter: 'agNumberColumnFilter'},
      { headerName: "Title in manuscript", headerTooltip: "Title in manuscript", field: "text.manuscript_title_orig", hide: false},
      { headerName: "Title in manuscript translit.", headerTooltip: "Title in manuscript translit.", field: "text.manuscript_title_orig_transliteration", hide: true },
      { headerName: "Title in manuscript transla.", headerTooltip: "Title in manuscript transla.", field: "text.manuscript_title_translation", hide: true },
      { headerName: "Section name", headerTooltip: "Section name", field: "section.section_name"},
      { headerName: "Section number", headerTooltip: "Section number", field: "section.section_number", hide: false, comparator: numberSort, filter: 'agNumberColumnFilter' },
      { headerName: "Incipit pp./ff.", headerTooltip: "Incipit pp./ff.", field: "section.pages_folios_incipit", hide: false},
      { headerName: "Incipit", headerTooltip: "Incipit", field: "section.incipit_orig", cellRenderer: richTextRender, hide: false },
      { headerName: "Incipit translit.", headerTooltip: "Incipit translit.", field: "section.incipit_orig_transliteration", cellRenderer: richTextRender, hide: true },
      { headerName: "Incipit transla.", headerTooltip: "Incipit transla.", field: "section.incipit_translation", cellRenderer: richTextRender, hide: true },
      { headerName: "Explicit pp./ff.", headerTooltip: "Explicit pp./ff.", field: "section.pages_folios_explicit", hide: false},
      { headerName: "Explicit", headerTooltip: "Explicit", field: "section.explicit_orig", cellRenderer: richTextRender, hide: false },
      { headerName: "Explicit translit.", headerTooltip: "Explicit translit.", field: "section.explicitorig_transliteration", cellRenderer: richTextRender, hide: true },
      { headerName: "Explicit transla.", headerTooltip: "Explicit transla.", field: "section.explicit_translation", cellRenderer: richTextRender, hide: true },
      { headerName: "Colophon pp./ff.", headerTooltip: "Colophon pp./ff.", field: "text.pages_folios_colophon", hide: false},
      { headerName: "Extent", headerTooltip: "Extent", field: "text.extent", hide: false},
      { headerName: "Version", headerTooltip: "Version", field: "text.version", hide: false},
      // { headerName: "Colophon", field: "text.colophon_orig"},
      // { headerName: "Colophon translit.", field: "text.colophon_transliteration", hide: true },
      // { headerName: "Colophon transla.", field: "text.colophon_translation", hide: true },
      // { headerName: "Notes", field: "text.notes", hide: true },      
    ]},

    // { headerName: "Credits", children: [
    //   { headerName: "Correspondent(s)", field: "manuscript.correspondent_names", hide: true },
    //   { headerName: "Transcriber(s)", field: "manuscript.transcriber_names", hide: true },
    //   { headerName: "Compiler(s)", field: "manuscript.compiler_names", hide: true },
    // ] },
  ];

  const rowData = [
    <% @queries.each do |key, value| %>
      <% value.each do |rec| %>
        { 
          section:{
            <% section = key == :sections ? rec : @new_section %>
            section_name: "<%= section.section_name %>",
            section_number: "<%= section.index.present? ? (section.index + 1) : '' %>",
            pages_folios_incipit: "<%= section.pages_folios_incipit %>",
            incipit_orig: `<%= section.incipit_orig.html_safe %>`,
            incipit_orig_transliteration: `<%= section.incipit_orig_transliteration %>`,
            incipit_translation: `<%= section.incipit_translation %>`,
            pages_folios_explicit: "<%= section.pages_folios_explicit %>",
            explicit_orig: `<%= section.explicit_orig %>`,
            explicitorig_transliteration: `<%= section.explicitorig_transliteration %>`,
            explicit_translation: `<%= section.explicit_translation %>`,
          },
          text: {
            <% text = key == :texts ? rec : ([:sections].include?(key) ? section.text : @new_text) %>
            id: <%= text.id || "undefined" %>,
            text_pages_folios: "<%= text.text_pages_folios_to %>",
            decoration: "<%= text.decoration %>",
            title_folios_pages: "<%= text.title_pages_folios_to %>",
            manuscript_title_orig: "<%= text.manuscript_title_orig %>",
            manuscript_title_orig_transliteration: "<%= text.manuscript_title_orig_transliteration %>",
            manuscript_title_translation: "<%= text.manuscript_title_translation %>",
            pages_folios_colophon: "<%= text.colophon_pages_folios_to %>",
            colophon_orig: "<%= text.colophon_orig %>",
            colophon_transliteration: "<%= text.colophon_transliteration %>",
            colophon_translation: "<%= text.colophon_translation %>",
            notes: "<%= text.notes %>",
            transcriber_id: "<%= text.transcriber_id %>",// COME BACK TO ME
            version: "<%= text.version %>",
            extent: "<%= text.extent %>",
            languages: <%= text.languages.map(&:language_name).to_json.html_safe %>,
            date_from: "<%= text.try(:date_from) %>",
            date_to: "<%= text.try(:date_to) %>",
            specific_date: "<%= 'ca. ' if !text.date_exact && text.specific_date.present? %><%= text.try(:specific_date) %>",
            no_columns: "<%= text.no_columns %>",
            scribes: <%= (text.try(:scribes) || []).map(&:full_name).to_json.html_safe %>,
            script: "<%= text.script %>",
            notes_on_scribe: `<%= text.notes_on_scribe.try(:html_safe) %>`,
          },
          content: {
            <% content = key == :contents ? rec : ([:texts, :sections].include?(key) ? text.content : @new_content) %>
            id: <%= content.id || "undefined" %>,
            sequence_no: "<%= content.sequence_no %>",
            title: "<%= content.try(:title).try(:title_orig) %>",
            author: "<%= content.author.try(:full_name) %>",
            apocryphal: "<%= content.try(:title).try(:apocryphon_id).present? ? 'Apocryphal' : 'Non apocryphal' %>",
          },
          apocryphon: {
            <% apocryphon = (content.title_id.present? && content.title.apocryphon_id.present? ? content.title.apocryphon : @new_apocryphon) %>
            id: <%= apocryphon.id || "undefined" %>,
            apocryphon_no: "<%= apocryphon.apocryphon_no %>",
            main_english_title: "<%= apocryphon.main_eng_title if apocryphon.id.present?  %>",
            other_english_titles: "<%= Title.where(apocryphon_id: apocryphon.id).where(language_id: english_id).order('title_orig').where.not(id: apocryphon.main_english_title_id).map{ |t| t.title_orig.html_safe }.join(', ') if apocryphon.id.present? %>",
            main_latin_title: "<%= apocryphon.main_lat_title if apocryphon.id.present?  %>",
            other_latin_titles: "<%= Title.where(apocryphon_id: apocryphon.id).where(language_id: latin_id).order('title_orig').where.not(id: apocryphon.main_latin_title_id).map{ |t| t.title_orig.html_safe }.join(', ') if apocryphon.id.present? %>",
          },
          booklet: {
            <% booklet = key == :booklets ? rec : ([:texts, :sections, :contents].include?(key) && content.booklet_id.present? ? content.booklet : @new_booklet) %>
            id: <%= booklet.id || "undefined" %>,
            booklet_no: "<%= booklet.try(:booklet_no) %>",
            pages_folios_from: "<%= booklet.try(:pages_folios_from) %>",
            pages_folios_to: "<%= booklet.try(:pages_folios_to) %>",
            date_from: "<%= booklet.try(:date_from) %>",
            date_to: "<%= booklet.try(:date_to) %>",
            specific_date: "<%= 'ca. ' if !booklet.date_exact && booklet.specific_date.present? %><%= booklet.try(:specific_date) %>",
            scribes: <%= (booklet.try(:scribes) || []).map(&:full_name).to_json.html_safe %>,
            content_type: "<%= booklet.try(:content_type) %>",
          },
          manuscript: {
            <% manuscript = key == :manuscripts ? rec : ([:booklets].include?(key) || content.booklet_id.present? ? booklet.manuscript : content.manuscript) %>
            id: <%= manuscript.id || "undefined" %>,
            identifier: "<%= manuscript.identifier %>",
            census_no: "<%= manuscript.census_no %>",
            status: "<%= manuscript.status %>",
            institution_id: "<%= manuscript.institution_id %>",
            <% m_institution = manuscript.institution %>
            institution_name: `<%= m_institution.try(:display_name).try(:html_safe) %>`,
            institution_name_alternative: "<%= m_institution.try(:name_alt) %>",
            <% m_institution_loc = manuscript.institution.try(:location) %>
            institution_city: "<%= m_institution_loc.try(:city) %>",
            institution_city_alt: "<%= m_institution_loc.try(:city_alt) %>",
            institution_region: "<%= m_institution_loc.try(:region) %>",
            institution_region_alt: "<%= m_institution_loc.try(:region_alt) %>",
            institution_country: `<%= m_institution_loc.try(:country).try(:html_safe) %>`,
            institution_diocese: "<%= m_institution_loc.try(:diocese) %>",
            institution_diocese_alt: "<%= m_institution_loc.try(:diocese_alt) %>",
            scribe_names: <%= manuscript.scribes.map(&:full_name).to_json.html_safe %>,
            scribe_ids: <%= manuscript.scribes.map(&:id).to_json.html_safe %>,
            correspondent_names: <%= manuscript.correspondents.map(&:full_name).to_json.html_safe %>,
            correspondent_ids: <%= manuscript.correspondents.map(&:id).to_json.html_safe %>,
            transcriber_names: <%= manuscript.transcribers.map(&:full_name).to_json.html_safe %>,
            transcriber_ids: <%= manuscript.transcribers.map(&:id).to_json.html_safe %>,
            compiler_names: <%= manuscript.compilers.map(&:full_name).to_json.html_safe %>,
            compiler_ids: <%= manuscript.compilers.map(&:id).to_json.html_safe %>,
            shelfmark: "<%= manuscript.shelfmark.html_safe %>",
            old_shelfmark: "<%= manuscript.old_shelfmark.html_safe  %>",
            material: "<%= manuscript.material.html_safe  %>",
            dimensions: "<%= manuscript.dimensions.html_safe %>",
            leaf_page_no: "<%= manuscript.leaf_page_no + (manuscript.is_folios ? "ff." : "pp.") %>",
            date_from: "<%= manuscript.date_from.html_safe  %>",
            date_to: "<%= manuscript.date_to.html_safe  %>",
            specific_date: "<%= 'ca. ' if !manuscript.date_exact && manuscript.specific_date.present? %><%= manuscript.specific_date.html_safe %>",
            content_type: `<%= manuscript.content_type.html_safe %>`,
            notes: `<%= manuscript.notes.html_safe  %>`,
            languages: <%= manuscript.languages.pluck(:language_name).to_json.html_safe %>,
            identification: `<%= [
              [['lost', 'destroyed'].include?(manuscript.status) ? '*' : '', m_institution_loc.try(:city)].select{ |t| t.present? }.join(""),
              m_institution_loc.try(:country).try(:html_safe),
              m_institution.try(:display_name).try(:html_safe),
              manuscript.shelfmark.html_safe
            ].select{ |s| s.present? }.join(', ') %>`,
          },
          genesis: {
            <% genesis_source = manuscript.booklets.present? ? booklet : manuscript %>
            institution_name: "<%= genesis_source.genesis_institution.try(:name) %>",
            institution_name_alt: "<%= genesis_source.genesis_institution.try(:name_alt) %>",
            religious_order_name: "<%= genesis_source.genesis_religious_order.try(:order_name) %>",
            religious_order_abbrev: "<%= genesis_source.genesis_religious_order.try(:abbreviation)%>",
            city: "<%= genesis_source.genesis_location.try(:city) %>",
            city_alt: "<%= genesis_source.genesis_location.try(:city_alt) %>",
            region: "<%= genesis_source.genesis_location.try(:region) %>",
            region_alt: "<%= genesis_source.genesis_location.try(:region_alt) %>",
            country: "<%= genesis_source.genesis_location.try(:country) %>",
            diocese: "<%= genesis_source.genesis_location.try(:diocese) %>",
            diocese_alt: "<%= genesis_source.genesis_location.try(:diocese_alt) %>",
            origin_notes: `<%= genesis_source.try(:origin_notes).try(:html_safe) %>`,
            ownerships: `<%= genesis_source.ownerships.map(&:full_display_name).join('; ').html_safe %>`,
          }
        },
      <% end %>
    <% end %>
  ];

  const gridOptions = {
    columnDefs: columnDefs,
    defaultColDef: defaultColDef,
    autoGroupColumnDef: {
      cellRendererParams: {
        suppressCount: true,
      },
      filter: 'agTextColumnFilter',
      filterValueGetter: params => {      
          // console. log("params", params);
          const colId = params.column.colId;        
          if (colId.includes('identification')) {
              return params.data.manuscript.identification;   
          }
      },           
    },
    rowData: rowData,
    sideBar: 'columns',
    rowHeight: 28,
    suppressAggFuncInHeader: true,
    groupDisplayType: 'multipleColumns',
    enableBrowserTooltips: true,
    aggFuncs: {
      customAgg: (params) => {
        let arr = params.values.filter(onlyUnique).map(function(val) {
          return val == "" || val == [] || val == {} ? '(blank)' : val;
        })
        return arr.join(' | ');
      }
    },
    initialGroupOrderComparator: function (params) {
      if(params.nodeA.field == "manuscript.identification" && params.nodeB.field == "manuscript.identification"){
        a1 = params.nodeA.allLeafChildren[0].data.manuscript.institution_city;
        a2 = params.nodeB.allLeafChildren[0].data.manuscript.institution_city;
        b1 = params.nodeA.allLeafChildren[0].data.manuscript.institution_name;
        b2 = params.nodeB.allLeafChildren[0].data.manuscript.institution_name;
        c1 = params.nodeA.allLeafChildren[0].data.manuscript.shelfmark;
        c2 = params.nodeB.allLeafChildren[0].data.manuscript.shelfmark;
        if(a1 == a2){
          if(b1 == b2) return b1 < b2 ? -1 : b1 > b2 ? 1 : 0;
          else return c1 < c2 ? -1 : c1 > c2 ? 1 : 0;
        } else return a1 < a2 ? -1 : a1 > a2 ? 1 : 0;
      } else {
        const a = params.nodeA.key || '';
        const b = params.nodeB.key || '';
        return a < b ? -1 : a > b ? 1 : 0;
      }
    },
    rowGroupPanelShow: "onlyWhenGrouping",
    statusBar: {
      statusPanels: [
        { statusPanel: 'agTotalAndFilteredRowCountComponent', align: 'left' },
        { statusPanel: 'agTotalRowCountComponent', align: 'center' },
        { statusPanel: 'agFilteredRowCountComponent' },
        { statusPanel: 'agSelectedRowCountComponent' },
      ],
    },
  };

  function numberSort(num1, num2){
    return parseInt(num1) - parseInt(num2);
  };

  function richTextRender(p) {
    return p.value;
  }

  function onFilterTextBoxChanged() {
      gridOptions.api.setQuickFilter(
        document.getElementById('filter-text-box').value
      );
  }

  function tooltipValueGetter(params) {
    return params.colDef.headerName;
  }

  const eGridDiv = document.querySelector('#sections_grid');
  new agGrid.Grid(eGridDiv, gridOptions);
  var columnToolPanel = gridOptions.api.getToolPanelInstance('columns');
  columnToolPanel.collapseColumnGroups();
  autoSizeAll(gridOptions, false);

  // var model = {content.apocryphal: {values: ["Apocryphal"], filterType: "set"}};
  // gridOptions.api.setFilterModel(model);
  
</script>
