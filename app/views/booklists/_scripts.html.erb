<script type="text/javascript">
let booklistVue;
$(document).ready(function(){
	booklistVue = new Vue({
		name: 'booklistVue',
		el: '#booklist-form',
		data: {
			languages: <%= Language.all.to_json.html_safe %>,
			language_id: <%= booklist.language_id ||= 'null' %>,
			english_id: <%= english_id %>,
			date_exact: <%= booklist.date_exact ? "true" : "false" %>
		},
		mounted(){
			runTomSelects();
		},
	});
});

function runTomSelects(){
	new TomSelect("#booklist_library_owner_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_booklist_type", ts_sort_text_asc_max_1_create);
	new TomSelect("#booklist_institution_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_location_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_religious_order_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_language_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_scribe_id", ts_sort_text_asc_max_1);
	<% booklist.booklist_sections.each do |bs| %>
		new TomSelect("#apocrypha-mentioned-section-<%= bs.id %>",{
			options: [
				<% Apocryphon.all.each_with_index do |ap, i| %>
					{ value: 'Apocryphon_<%= ap.id %>', text: '<%= ap.display_name %>', other_titles: `<%= ap.titles.map{ |t| t.title_orig }.to_json.html_safe %>` }<%= ',' unless i == (Apocryphon.all.count - 1) %>
				<% end %>
			],
			sortField: { field: "text", direction: "asc" }, 
			maxItems: 1,
			searchField: ['text', 'other_titles']
		});
		new TomSelect("#booklist_section_<%= bs.id %>_manuscript_id",{
			options: [
				<% Manuscript.all.each_with_index do |ma, i| %>
					{ value: '<%= ma.id %>', text: '<%= ma.long_display_name %>', city: `<%= ma.city %>` }<%= ',' unless i == (Manuscript.all.count - 1) %>
				<% end %>
			],
			items: ['<%= bs.manuscript_id %>'],
			sortField: { field: "city", direction: "asc" }, maxItems: 1, 
		});
		new TomSelect("#booklist_section_<%= bs.id %>_modern_source_id",{
			sortField: { field: "city", direction: "asc" }, maxItems: 1, 
		});
	<% end %>
	new TomSelect("#preserved-in",{
		options: [
			<% ModernSource.all.each_with_index do |ms, i| %>
				{ value: '<%= ms.id %>', text: '<%= ms.display_name %>' }<%= ',' unless i == (ModernSource.all.count - 1) %>
			<% end %>
		],
		sortField: { field: "city", direction: "asc" }, maxItems: 1, 
	});
};


function addResource(obj, bs_id){
	if($(obj).val()[0] == ""){
		timeoutReload();
	}else{
		var split = $(obj).val()[0].split('_');
		var my_data = {};
		my_data.booklist_reference = {
			record_type: split[0],
			record_id: split[1],
			booklist_section_id: bs_id
		};
	  my_data.authenticity_token = "<%= form_authenticity_token %>";
	  console.log('my_data', my_data)
	  $.ajax({
	    url: "<%= booklist_references_path %>",
	    type: 'POST',
	    data: JSON.stringify(my_data),
	    contentType: 'application/json',
	    success: function(data) {
	    	console.log('reloading?')
	      timeoutReload();
	    }
	  });
	}
}

function addPreserved(obj, b_id){
	if($(obj).val()[0] == ""){
		timeoutReload();
	}else{
		var ms_id = $(obj).val()[0];
		var my_data = {};
		my_data.modern_source_reference = {
			record_type: 'Booklist',
			record_id: b_id,
			modern_source_id: ms_id,
		};
	  my_data.authenticity_token = "<%= form_authenticity_token %>";
	  console.log('my_data', my_data)
	  $.ajax({
	    url: "<%= modern_source_references_path %>",
	    type: 'POST',
	    data: JSON.stringify(my_data),
	    contentType: 'application/json',
	    success: function(data) {
	    	console.log('reloading?')
	      timeoutReload();
	    }
	  });
	}
}

function deleteBooklistReference(br_id){
	if(confirm("Are you sure you want to remove this record from this booklist?")){
    $.ajax({
      url: "/booklist_references/"+br_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload();
      }
    });
	}
}

function deleteBooklistSection(bs_id){
	if(confirm("Are you sure you want to remove this record from this booklist?")){
    $.ajax({
      url: "/booklist_sections/"+bs_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload();
      }
    });
	}
}

function deleteModernSourceReference(msr_id){
	if(confirm("Are you sure you want to remove this record from this booklist?")){
    $.ajax({
      url: "/modern_source_references/"+msr_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload();
      }
    });
	}
}

</script>
