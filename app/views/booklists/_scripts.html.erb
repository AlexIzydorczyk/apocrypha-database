<script type="text/javascript">
let booklistVue;
$(document).ready(function(){
	booklistVue = new Vue({
		name: 'booklistVue',
		el: '#booklist-form',
		data: {
			languages: <%= Language.all.to_json.html_safe %>,
			language_id: <%= booklist.language_id ||= 'null' %>,
			english_id: <%= english_id %>,
			date_exact: <%= booklist.date_exact ? "true" : "false" %>,
			date_to: '<%= booklist.date_to %>', date_from: '<%= booklist.date_from %>',
			date_to_select: null, date_from_select: null,
		},
		watch: {
			date_from(){
				this.setFrom();
			},
		},
		methods: {
			setFrom(){
				let new_options = [];
				for(let i=0; i<<%= Date.today.year%>; i++){
					if (
						(
							this.date_from == ''
						 || (( (parseInt(this.date_from)-1)%25 == 0) && i%25==0)
						 || (( ((parseInt(this.date_from)%100)-1)%33 == 0) && (i%100 != 99) && i%100%33==0)
						 || i==<%= Date.today.year %>
						)
						&& i>this.date_from
					) new_options.push(i);
				}
				if(!(this.date_to_select.items.length > 0 && this.date_from != '' && (((this.date_from-1)%100%33==0 && this.date_to_select.items[0]%100%33==0) || ((this.date_from-1)%25==0 && this.date_to_select.items[0]%25==0)))) this.date_to_select.clear();
				this.date_to_select.clearOptions(true);
				this.date_to_select.addOptions(new_options.map( o => ({value: o, text: o})));
				if(this.date_to_select.items.length < 1) this.date_to_select.refreshOptions(true);
			}
		},
		mounted(){
			runTomSelects();
			$('#booklist-form').removeClass('d-none');
			this.date_to_select = new TomSelect("#booklist_date_to", {
			  maxItems: 1,
			  maxOptions: null,
			});
			this.date_from_select = new TomSelect("#booklist_date_from", {
			  maxItems: 1,
			  maxOptions: null,
			});
		},
	});
});

function runTomSelects(){
	new TomSelect("#booklist_library_owner_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_booklist_type", ts_sort_text_asc_max_1_create);
	var booklist_location_select = new TomSelect("#booklist_location_id",ts_sort_text_asc_max_1);
	var booklist_religious_order_select = new TomSelect("#booklist_religious_order_id", ts_sort_text_asc_max_1);
	new TomSelect("#booklist_institution_id", {
		maxItems: 1,
		valueField: 'id',
		searchField: ['institution','location_name'],
		options: [
			<% Institution.includes(:location).all.each do |i| %>
			{id: <%= i.id %>, institution: "<%= i.display_name %>", location_name: "<%= i.location.try(:city_region_country) %>", location_id: "<%= i.location.try(:id) %>", religious_order_id: "<%= i.religious_order_id %>"},
			<% end %>
		],
		onItemAdd: function(value, item){
			let location_id = $(item).attr('location_id');
			booklist_location_select.addItem(location_id);
			let religious_order_id = $(item).attr('religious_order_id');
			booklist_religious_order_select.addItem(religious_order_id);
		},
		render: {
			option: function(data, escape) {
				return '<div class="double-ts-option">' +
						'<span class="title">' + escape(data.institution) + '</span>' +
						'<span class="subtitle">' + escape(data.location_name) + '</span>' +
					'</div>';
			},
			item: function(data, escape) {
				return '<div location_id="' + escape(data.location_id) + '" religious_order_id="' + escape(data.religious_order_id) + '">' + escape(data.institution) + '</div>';
			}
		}
	});
	new TomSelect("#booklist_language_id", {
		sortField: {
			field: "text",
			direction: "asc",
		},
		maxItems: 1,
		create: function(l){
			saveForm($(`#booklist-form form`), $(`#new-language #record-id`));
			$("#new-language #language_language_name").val(l);
			$('#new-language').modal('show');
		}
	});
	new TomSelect("#booklist_scribe_id", ts_sort_text_asc_max_1);
	<% booklist.booklist_sections.each do |bs| %>
		new TomSelect("#apocrypha-mentioned-section-<%= bs.id %>",{
			options: [
				<% Apocryphon.all.each_with_index do |ap, i| %>
					{ value: 'Apocryphon_<%= ap.id %>', text: `<%= ap.display_name %>`, other_titles: `<%= ap.titles.map{ |t| t.title_orig }.to_json.html_safe %>` }<%= ',' unless i == (Apocryphon.all.count - 1) %>
				<% end %>
			],
			sortField: { field: "text", direction: "asc" }, 
			maxItems: 1,
			searchField: ['text', 'other_titles']
		});
		new TomSelect("#booklist_section_<%= bs.id %>_manuscript_id",{
			options: [
				<% Manuscript.all.each_with_index do |ma, i| %>
					{ value: '<%= ma.id %>', text: '<%= ma.long_display_name %>', city: `<%= ma.city %>` }<%= ',' unless i == (Manuscript.all.count - 1) %>
				<% end %>
			],
			items: ['<%= bs.manuscript_id %>'],
			sortField: { field: "city", direction: "asc" }, maxItems: 1, maxOptions: null
		});
	<% end %>
	new TomSelect("#preserved-in",{
		options: [
			<% ModernSource.all.each_with_index do |ms, i| %>
				{ value: '<%= ms.id %>', text: `<%= ms.display_name %>` }<%= ',' unless i == (ModernSource.all.count - 1) %>
			<% end %>
		],
		sortField: { field: "city", direction: "asc" }, maxItems: 1, 
	});
};


function addResource(obj, bs_id){
	if($(obj).val()[0] == ""){
		timeoutReload(null, 0);
	}else{
		var split = $(obj).val()[0].split('_');
		var my_data = {};
		my_data.booklist_reference = {
			record_type: split[0],
			record_id: split[1],
			booklist_section_id: bs_id
		};
	  my_data.authenticity_token = "<%= form_authenticity_token %>";
	  console.log('my_data', my_data)
	  $.ajax({
	    url: "<%= booklist_references_path %>",
	    type: 'POST',
	    data: JSON.stringify(my_data),
	    contentType: 'application/json',
	    success: function(data) {
	    	console.log('reloading?')
	      timeoutReload(null, 0);
	    }
	  });
	}
}

function addPreserved(obj, b_id){
	if($(obj).val()[0] == ""){
		timeoutReload(null, 0);
	}else{
		var ms_id = $(obj).val()[0];
		var my_data = {};
		my_data.modern_source_reference = {
			record_type: 'Booklist',
			record_id: b_id,
			modern_source_id: ms_id,
		};
	  my_data.authenticity_token = "<%= form_authenticity_token %>";
	  console.log('my_data', my_data)
	  $.ajax({
	    url: "<%= modern_source_references_path %>",
	    type: 'POST',
	    data: JSON.stringify(my_data),
	    contentType: 'application/json',
	    success: function(data) {
	    	console.log('reloading?')
	      timeoutReload(null, 0);
	    }
	  });
	}
}

function deleteBooklistReference(br_id){
	if(confirm("Are you sure you want to remove this record from this booklist?")){
		saveBeforeModalForms();
    $.ajax({
      url: "/booklist_references/"+br_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload(null, 0);
      }
    });
	}
}

function deleteBooklistSection(bs_id){
	if(confirm("Are you sure you want to remove this record from this booklist?")){
		saveBeforeModalForms();
    $.ajax({
      url: "/booklist_sections/"+bs_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload(null, 0);
      }
    });
	}
}

function deleteModernSourceReference(msr_id){
	if(confirm("Are you sure you want to remove this record from this booklist?")){
		saveBeforeModalForms();
    $.ajax({
      url: "/modern_source_references/"+msr_id,
      type: 'DELETE',
      data: JSON.stringify({authenticity_token: "<%= form_authenticity_token %>"}),
      contentType: 'application/json',
      success: function(data) {
        timeoutReload(null, 0);
      }
    });
	}
}

</script>
