<div class="form-group mb-2">
  <input type="text" id="filter-text-box" placeholder="Filter grid" oninput="onFilterTextBoxChanged()" name="filter">
</div>
<div id="modern_sources_grid" class="ag-theme-alpine" style="height: 75vh; width:100%;"></div>

<% modern_sources.each do |modern_source| %>
  <%= button_to "Delete", modern_source_path(modern_source), method: :delete, class: "d-none", id: 'delete_'+modern_source.id.to_s %>
<% end %>

<%= render 'locations/modals/form_from_grid', location: Location.first %>
<%= render 'institutions/modals/form_from_grid', institution: Institution.first %>
<%= render 'modern_sources/modals/change_location', modern_source: modern_sources.first %>
<%= render 'modern_sources/modals/change_institution', modern_source: modern_sources.first %>
<%= render 'layouts/grid_modal_js' %>

<script type="text/javascript" charset="utf-8">

  const defaultColDef = {editable: true , sortable: true, filter: true,  resizable: true, flex: 1};

  const columnDefs = [
        { headerName: "Type", field: "source_type", editable: false},
        
        { headerName: "Author type", field: "author_type", editable: false, hide: true},
        { headerName: "Corporate author", children: [
          { headerName: "Institution id", field: "institution_id", hide: true, editable: false, cellRenderer: function(params) {
            return `${params.value} <button type='button' class='btn btn-outline-secondary btn-sm float-end' onclick='openModal("institutions/${params.value}", "institution")' ${params.value ? "" : "disabled='true'"}><i class='fa-solid fa-pencil'></i></button><button type='button' class='btn btn-outline-secondary btn-sm float-end' onclick="openModal('bibliography/${params.data.id}', 'modern_source', 'institution')"><i class='fa-solid fa-arrows-repeat'></i></button>`
          } },
          { headerName: "Name orig", field: "institution_name_orig", hide: true, editable: false },
          { headerName: "Name english", field: "institution_name_english", hide: true, editable: false },
          { headerName: "Name transliteration", field: "institution_name_orig_transliteration", hide: true, editable: false },
          { headerName: "Location", field: "institution_location", hide: true, editable: false },
          { headerName: "Religious order", field: "institution_religious_order", hide: true, editable: false },
        ]},



        { headerName: "Repository", field: "repository_id", hide: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { values: <%= Institution.pluck(:name_orig).to_json.html_safe %> }, valueGetter: respositoryGetter, valueSetter: respositorySetter},

        { headerName: "All regular author", field: "authors", hide: true, editable: false },
        { headerName: "First author", children: [
          { headerName: "First name", field: "first_author_first_name", hide: false, editable: false },
          { headerName: "Last name", field: "first_author_last_name", hide: false, editable: false },
        ] },
        
        { headerName: "Publication title", field: "publication_title_orig"},
        { headerName: "Publication title transliteration", field: "publication_title_transliteration", hide: true},
        { headerName: "Publication title translation", field: "publication_title_translation", hide: true},

        { headerName: "Title", field: "title_orig"},
        { headerName: "Title transliteration", field: "title_transliteration", hide: true},
        { headerName: "Title translation", field: "title_translation", hide: true},
        
        { headerName: "Editors", field: "editors", hide: false, editable: false },
        { headerName: "Translators", field: "translators", hide: false, editable: false },
        
        { headerName: "Edition", field: "edition", hide: true, comparator: numberSort},

        { headerName: "Volume no.", field: "volume_no", hide: true, comparator: numberSort},
        { headerName: "Volume title", field: "volume_title_orig", hide: true},
        { headerName: "Volume title transliteration", field: "volume_title_transliteration", hide: true},
        { headerName: "Volume title translation", field: "volume_title_translation", hide: true},

        { headerName: "Part no.", field: "part_no", hide: true, comparator: numberSort},
        { headerName: "Part title", field: "part_title_orig", hide: true},
        { headerName: "Part title transliteration", field: "part_title_transliteration", hide: true},
        { headerName: "Part title translation", field: "part_title_translation", hide: true},

        { headerName: "Series no.", field: "series_no", hide: true, comparator: numberSort},
        { headerName: "Series title orig", field: "series_title_orig", hide: true},
        { headerName: "Series title transliteration", field: "series_title_transliteration", hide: true},
        { headerName: "Series title translation", field: "series_title_translation", hide: true},
        { headerName: "No. of volumes", field: "num_volumes", hide: true},

        { headerName: "document type", field: "document_type", hide: true, cellEditor: 'agRichSelectCellEditor', cellEditorParams: { values: <%= ModernSource.all.pluck(:document_type).uniq.select{ |t| t.present? }.to_json.html_safe %> }},

        { headerName: "Shelfmark", field: "shelfmark", hide: true},
        { headerName: "ISBN", field: "ISBN", hide: true},
        { headerName: "DOI", field: "DOI", hide: true},

        { headerName: "Publication", children: [
          { headerName: "Original publication year", field: "original_publication_creation_date", hide: true, comparator: numberSort},
          { headerName: "Publication year", field: "publication_creation_date", hide: true, comparator: numberSort},
          { headerName: "Pages in publication", field: "pages_in_publication", hide: true, comparator: numberSort},
          { headerName: "Publisher", field: "publisher", cellEditor: 'agRichSelectCellEditor', cellEditorParams: { values: <%= ModernSource.all.pluck(:publisher).uniq.select{ |t| t.present? }.to_json.html_safe %> }},
        ]},
        { headerName: "Publication location", children: [
          { headerName: "Location id", field: "publication_location_id", hide: true, editable: false, cellRenderer: function(params) {
            return `${params.value} <button type='button' class='btn btn-outline-secondary btn-sm float-end' onclick='openModal("locations/${params.value}", "location")' ${params.value ? "" : "disabled='true'"}><i class='fa-solid fa-pencil'></i></button><button type='button' class='btn btn-outline-secondary btn-sm float-end' onclick="openModal('bibliography/${params.data.id}', 'modern_source')"><i class='fa-solid fa-arrows-repeat'></i></button>`
            } },
          { headerName: "City orig", field: "publication_location_city_orig", hide: true, editable: false },
          { headerName: "Diocese orig", field: "publication_location_diocese_orig", hide: true, editable: false },
          { headerName: "Region orig", field: "publication_location_region_orig", hide: true, editable: false },
          { headerName: "Country", field: "publication_location_country", hide: true, editable: false },
        ] },

        { headerName: "URLs", field: "urls", editable: false, hide: true},
        { headerName: "Dates accessed", field: "dates_accessed", editable: false, hide: true},

        { headerName: "Actions", field: "links", editable: false, cellRenderer: function(links) {
      return "<a href='" + links.value.edit + "' class='btn btn-outline-secondary btn-sm' target='_blank'>Edit</a><a href='#' onclick='if(confirm(\"Are you sure you want to delete this bibliography?\")){$("+'"#'+links.value.delete_btn+'"'+").click()}' class='btn btn-outline-danger btn-sm'>delete</a>"
    } }
  ];

  function numberSort(num1, num2){
    return num1 - num2;
  };

  function insitutionGetter(params) {
      return <%= Institution.pluck(:id, :name_orig).to_h.to_json.html_safe %>[params.data.institution_id]
    }
  function insitutionSetter(params) {
      params.data.institution_id = <%= Institution.pluck(:name_orig, :id).to_h.to_json.html_safe %>[params.newValue]
    }

    function respositoryGetter(params) {
      return <%= Institution.pluck(:id, :name_orig).to_h.to_json.html_safe %>[params.data.repository_id]
    }
  function respositorySetter(params) {
      params.data.repository_id = <%= Institution.pluck(:name_orig, :id).to_h.to_json.html_safe %>[params.newValue]
    }

  function locationGetter(params) {
    return params.data ? <%= Location.all.map{ |l| [l.id, l.city_region_country] }.to_h.to_json.html_safe %>[params.data.publication_location_id] : ''
  }
  function locationSetter(params) {
    params.data.publication_location_id = <%= Location.all.map{ |l| [l.city_region_country, l.id] }.to_h.to_json.html_safe %>[params.newValue]
  }

  const rowData = [
    <% modern_sources.each do |modern_source| %>
      { id:<%= modern_source.id %>,
        source_type: "<%= modern_source.source_type.humanize %>",
        author_type: "<%= modern_source.author_type %>",
        authors: <%= modern_source.authors.map(&:full_name).to_json.html_safe %>,
        first_author_first_name: "<%= modern_source.authors.first.try(:first_name_vernacular) %>",
        first_author_last_name: "<%= modern_source.authors.first.try(:last_name_vernacular) %>",
        editors: <%= modern_source.editors.map(&:full_name).to_json.html_safe %>,
        translators: <%= modern_source.translators.map(&:full_name).to_json.html_safe %>,
        institution_id: "<%= modern_source.source_type == 'handwritten_document' ? '' : modern_source.institution_id %>",

        institution_name_english: "<%= modern_source.source_type == 'handwritten_document' ? '' : modern_source.institution.try(:name_english) %>",
        institution_name_orig: "<%= modern_source.source_type == 'handwritten_document' ? '' : modern_source.institution.try(:name_orig) %>",
        institution_name_orig_transliteration: "<%= modern_source.source_type == 'handwritten_document' ? '' : modern_source.institution.try(:name_orig_transliteration) %>",
        institution_location: "<%= modern_source.institution.try(:location).try(:city_region_country) %>",
        institution_religious_order: "<%= modern_source.institution.try(:religious_order).try(:display_name) %>",

        repository_id: "<%= modern_source.source_type != 'handwritten_document' ? '' : modern_source.institution_id %>",
        publication_title_orig: "<%= modern_source.publication_title_orig %>",
        publication_title_transliteration: "<%= modern_source.publication_title_transliteration %>",
        publication_title_translation: "<%= modern_source.publication_title_translation %>",
        title_orig: "<%= modern_source.title_orig %>",
        title_transliteration: "<%= modern_source.title_transliteration %>",
        title_translation: "<%= modern_source.title_translation %>",
        document_type: "<%= modern_source.document_type %>",
        num_volumes: "<%= modern_source.num_volumes %>",
        volume_no: "<%= modern_source.volume_no %>",
        volume_title_orig: "<%= modern_source.volume_title_orig %>",
        volume_title_transliteration: "<%= modern_source.volume_title_transliteration %>",
        volume_title_translation: "<%= modern_source.volume_title_translation %>",
        part_no: "<%= modern_source.part_no %>",
        part_title_orig: "<%= modern_source.part_title_orig %>",
        part_title_transliteration: "<%= modern_source.part_title_transliteration %>",
        part_title_translation: "<%= modern_source.part_title_translation %>",
        series_no: "<%= modern_source.series_no %>",
        series_title_orig: "<%= modern_source.series_title_orig %>",
        series_title_transliteration: "<%= modern_source.series_title_transliteration %>",
        series_title_translation: "<%= modern_source.series_title_translation %>",
        edition: "<%= modern_source.edition %>",

        publication_location_id: "<%= modern_source.publication_location_id %>",
        publication_location_city_orig: "<%= modern_source.publication_location.try(:city_orig) %>",
        publication_location_diocese_orig: "<%= modern_source.publication_location.try(:diocese_orig) %>",
        publication_location_region_orig: "<%= modern_source.publication_location.try(:region_orig) %>",
        publication_location_country: "<%= modern_source.publication_location.try(:country) %>",
        publisher: "<%= modern_source.publisher %>",
        publication_creation_date: "<%= modern_source.publication_creation_date %>",
        original_publication_creation_date: "<%= modern_source.original_publication_creation_date %>",

        dates_accessed: <%= modern_source.source_urls.pluck(:date_accessed).push(modern_source.date_accessed).select{ |d| d.present? }.to_json.html_safe %>, urls: <%= modern_source.source_urls.pluck(:url).select{ |u| u.present? }.to_json.html_safe %>,
        pages_in_publication: "<%= modern_source.pages_in_publication %>",
        shelfmark: "<%= modern_source.shelfmark %>",ISBN: "<%= modern_source.ISBN %>",DOI: "<%= modern_source.DOI %>", links: { show: "<%= modern_source_path(modern_source) %>", edit: "<%= edit_modern_source_path(modern_source) %>", delete_btn: 'delete_<%= modern_source.id %>' }
      },
    <% end %>
  ];

  const gridOptions = {
    columnDefs: columnDefs,
    defaultColDef: defaultColDef,
    rowData: rowData,
    onCellValueChanged: onCellValueChanged,
    sideBar: 'columns',
  };

  function onCellValueChanged(event){
    console.log('cell value changed ', event);
    saveChange(event.data.id, event.data);
  }

  function onFilterTextBoxChanged() {
    gridOptions.api.setQuickFilter(
      document.getElementById('filter-text-box').value
    );
  }

  function saveChange(id, data){
    var my_data = {};
    my_data.in_grid = "1";
    my_data.authenticity_token = "<%= form_authenticity_token %>";
    my_data.modern_source = data;
    console.log('my_data', my_data);
    $.ajax({
      url: "/modern_sources/"+id,
      type: 'PUT',
      data: JSON.stringify(my_data),
      contentType: 'application/json',
      success: function(data) {
        console.log('result received:');
        console.log(data);
      }
    });
  };

  const eGridDiv = document.querySelector('#modern_sources_grid');
  new agGrid.Grid(eGridDiv, gridOptions);
  gridOptions.columnApi.autoSizeColumns(['publication_location_id']);

</script>
