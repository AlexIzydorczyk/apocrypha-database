<div class="d-flex flex-wrap mb-2 align-items-center" id="options">
  <% if user_signed_in? && current_user.admin? %>
    <button class="btn btn-sm btn-outline-action mx-2 mb-2 create" data-bs-toggle="modal" data-bs-target="#create-configuration"><i class="far fa-floppy-disk"></i> Create option</button>
    <button class="btn btn-sm btn-outline-action mx-2 mb-2 create" data-bs-toggle="modal" data-bs-target="#update-configuration-order"><i class="far fa-sort"></i> Update order</button>
  <% end %>
  <% @grid_states.each do |state| %>
    <div class="btn-group mx-2 mb-2" role="group">
      <button type="button" class="btn btn-sm btn-outline-action" onclick="getState({id: <%= state.id %>})"><%= state.state_name %></button>
      <button type="button" class="btn btn-sm btn-outline-action reset" style="display: none;" onclick="getState({id: <%= state.id %>})"><i class='far fa-undo'></i></button>
      <% if user_signed_in? && current_user.admin? %>
        <button type="button" class="btn btn-sm btn-outline-action" onclick="deleteState('delete-state-<%= state.id %>')"><i class='far fa-trash-alt'></i></button>
      <% end %>
    </div>
    <%= button_to "hidden", user_grid_state_path(state), method: :delete, class: "d-none", id: "delete-state-#{state.id}" %>
  <% end %>
</div>

<script type="text/javascript">
  $("#options button:not(.create)").click(function() {
    $("#options button").removeClass("active").closest(".btn-group").find(".reset").hide();
    $(this).addClass("active");
    $(this).closest(".btn-group").find(".reset").show();
  })
</script>

<!-- Modals -->
<div class="modal" id="create-configuration" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Create configuration</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Creating configuration based on current grid state.</p>
          <p>Note: state option will be avaliable to all users.</p>
          <div class="form-group">
            <label>Configuration name</label>
            <input type="text" name="state_name" id="new-grid-state-name" placeholder="Configuration name" class="form-control">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-action disable-on-click" onclick="saveState(false, $('#new-grid-state-name').val(), function(){timeoutReload('', 0);})">Save & Close</button>
        </div>
      </div>
    </div>
</div>
<div class="modal" id="update-configuration-order" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content"  id="rearrange">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Update configuration order</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <transition-group name="animate" tag="ul" class="list-group">
            <li class="list-group-item d-flex" v-for="(state, index) in states" :key="'state-' + state.id">
              <span>{{ state.state_name }}</span>
              <span class="ms-auto">
                <button class="btn btn-sm btn-outline-action" type="button" @click="up(index)"><i class="fas fa-angle-up"></i></button>
                <button class="btn btn-sm btn-outline-action" type="button" @click="down(index)"><i class="fas fa-angle-down"></i></button>
              </span>
            </li>
          </transition-group>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-action disable-on-click" @click="save">Save & Close</button>
        </div>
      </div>
    </div>
</div>

<div id="vue-name">
</div>

<script type="text/javascript">
  $( document ).ready(function() {
    vue = new Vue({
      el: "#rearrange",
      data: {
        states: <%= @grid_states.map(&:attributes).to_json.html_safe %>,
      },
      methods: {
        up(index){
          if(index > 0){
            temp = this.states[index-1]
            this.$set(this.states, index-1, this.states[index]);
            this.$set(this.states, index, temp);
          }
          this.resetIndexes();
        },
        down(index){
          if(index < this.states.length-1){
            temp = this.states[index+1]
            this.$set(this.states, index+1, this.states[index]);
            this.$set(this.states, index, temp);
          }
          this.resetIndexes();
        },
        resetIndexes(){
          this.states.forEach(function(state, index) {
            this.$set(state, 'index', index);
          }.bind(this));
        },
        save(){
          vue = this;
          $.ajax({
            url: "<%= sort_user_grid_states_path %>",
            method: "PUT",
            data: {
              ids: vue.states.map( s => s.id ),
              authenticity_token: "<%= form_authenticity_token %>",
            },
            success: function(data) {
              timeoutReload('', 0);
            }
          })
        },
      },
    });
  });
</script>

