<div class="d-flex mb-2 align-items-end">
  <div class="form-group mb-2">
    <input type="text" id="filter-text-box" placeholder="Filter grid" oninput="onFilterTextBoxChanged()" name="filter">
  </div>
  <button class="btn btn-sm btn-outline-action ms-auto" onclick="resetState()">Reset grid</button>
</div>
<div id="titles_grid" class="ag-theme-alpine" style="height: 75vh; width:100%;"></div>

<% titles.each do |title| %>
  <%= button_to "Delete", title_path(title), method: :delete, class: "d-none", id: 'delete_'+title.id.to_s %>
<% end %>

<% if user_signed_in? && current_user.adm_editor? %>
  <%= render 'titles/modals/change_apocryphon', title: titles.first %>
  <%= render 'layouts/grid_modal_js' %>
<% end %>
<% if user_signed_in? %>
  <%= render 'layouts/grid_save_state_js', record_type: "Title" %>
<% end %>

<script type="text/javascript" charset="utf-8">

  const defaultColDef = {editable: true , sortable: true, filter: true,  resizable: true};

  const columnDefs = [
        
        { headerName: "Language", field: "language_id", cellEditor: 'agRichSelectCellEditor', cellEditorParams: { values: <%= Language.all.map(&:language_name).to_json.html_safe %> }, valueGetter: languageGetter, valueSetter: languageSetter },

        { headerName: "Title", field: "title_orig", cellStyle: function(params) {
          if(params.data.italicized == "true") return {fontStyle: "italic"}
          return null
        }},
        { headerName: "Title (alternative)", field: "title_translation", hide: true, cellStyle: function(params) {
          if(params.data.italicized == "true") return {fontStyle: "italic"}
          return null
        }},
        { headerName: "Title (alt. translit.)", field: "title_orig_transliteration", hide: true, cellStyle: function(params) {
          if(params.data.italicized == "true") return {fontStyle: "italic"}
          return null
        }},
        
        { headerName: "Italicized?", field: "italicized", cellEditor: "agRichSelectCellEditor", cellEditorParams: { values: ["true", "false"]}},

        { headerName: "Apocryphon", children: [
          { headerName: "Id", field: "apocryphon", editable: false, hide: true, suppressColumnsToolPanel: true, cellRenderer: function(params) {
            return `${params.value.id} <button type='button' class='btn btn-outline-secondary btn-sm float-end' onclick="openModal('titles/${params.data.id}', 'title')"><i class='fa-solid fa-arrows-repeat'></i></button>`
          }},
          { headerName: "Title of apocryphon", field: "apocryphon", editable: false, suppressColumnsToolPanel: true, cellRenderer: function(apocryphon) {
            return `<a href="/apocrypha/${apocryphon.value.id}/edit" target="_blank">${apocryphon.value.display_name}</a>`
          }},
        ] },
          
        { headerName: "Actions", field: "links", editable: false, suppressColumnsToolPanel: true, cellRenderer: function(links) {
          return "<a href='#' onclick='if(confirm(\"Are you sure you want to delete this Title?\")){$("+'"#'+links.value.delete_btn+'"'+").click()}' class='btn btn-outline-danger btn-sm'>delete</a>"
        } }
  ];

  const rowData = [
    <% titles.each do |title| %>
      { id:<%= title.id %>,
        apocryphon: {
          id: "<%= title.apocryphon_id %>",
          display_name: "<%= title.apocryphon.try(:display_name) %>",
        },
        title_orig: "<%= title.title_orig.html_safe %>",
        title_orig_transliteration: "<%= title.title_orig_transliteration %>",
        title_translation: "<%= title.title_translation %>",
        language_id: "<%= title.language_id %>",
        italicized: "<%= title.italicized %>",
        links: { show: "<%= title_path(title) %>", edit: "<%= edit_title_path(title) %>", delete_btn: 'delete_<%= title.id %>' }
      },
    <% end %>
  ];

  const gridOptions = {
    columnDefs: columnDefs,
    defaultColDef: defaultColDef,
    rowData: rowData,
    onCellValueChanged: onCellValueChanged,
    sideBar: 'columns',
  };

  function languageGetter(params) {
    return <%= Language.pluck(:id, :language_name).to_h.to_json.html_safe %>[params.data.language_id]
  }
  function languageSetter(params) {
    params.data.language_id = <%= Language.pluck(:language_name, :id).to_h.to_json.html_safe %>[params.newValue]
  }

  function onCellValueChanged(event){
    console.log('cell value changed ', event);
    saveChange(event.data.id, event.data);
  }

  function onFilterTextBoxChanged() {
    gridOptions.api.setQuickFilter(
      document.getElementById('filter-text-box').value
    );
  }

  function saveChange(id, data){
    var my_data = {};
    my_data.in_grid = "1";
    my_data.authenticity_token = "<%= form_authenticity_token %>";
    my_data.title = data;
    console.log('my_data', my_data);
    $.ajax({
      url: "/titles/"+id,
      type: 'PUT',
      data: JSON.stringify(my_data),
      contentType: 'application/json',
      success: function(data) {
        console.log('result received:');
        console.log(data);
      }
    });
  };

  const eGridDiv = document.querySelector('#titles_grid');
  new agGrid.Grid(eGridDiv, gridOptions);
  gridOptions.columnApi.autoSizeColumns(['apocryphon']);
  autoSizeAll(gridOptions, false);
</script>
